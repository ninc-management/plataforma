function teamExpense2Transaction(teamExpense, teamId, codeNumber) {
  var transaction = {};
  transaction.modelCostCenter = 'Times';
  transaction.author = teamExpense.author;
  transaction.costCenter = teamId;
  transaction.description = teamExpense.description;
  transaction.nf = teamExpense.nf;
  transaction.type = teamExpense.type;
  transaction.subType = teamExpense.subType;
  transaction.value = teamExpense.value;
  transaction.created = teamExpense.created;
  transaction.lastUpdate = teamExpense.lastUpdate;
  transaction.paid = teamExpense.paid;
  transaction.code = '#' + codeNumber.toString();
  transaction.paidDate = teamExpense.paidDate;
  transaction.uploadedFiles = teamExpense.uploadedFiles;
  transaction.ISS = "0,00";
  transaction.editionHistory = [];

  return transaction;
}

function contractExpense2Transaction(contractExpense, contractId, invoiceTeamId, codeNumber) {
  var transaction = {};
  if (contractExpense.source == '000000000000000000000000') {
    transaction.modelCostCenter = 'Times';
    transaction.costCenter = invoiceTeamId;
  } else if (contractExpense.source == '000000000000000000000001') {
    transaction.modelCostCenter = 'Times';
    transaction.costCenter = '000000000000000000000000'; // ID para o time invisivel de clientes
  } else {
    transaction.modelCostCenter = 'Associados';
    transaction.costCenter = contractExpense.source;
  }

  transaction.contract = contractId;
  transaction.author = contractExpense.author;
  transaction.description = contractExpense.description;
  transaction.nf = contractExpense.nf;
  transaction.type = contractExpense.type;
  transaction.subType = contractExpense.subType;
  transaction.value = contractExpense.value;
  transaction.created = contractExpense.created;
  transaction.lastUpdate = contractExpense.lastUpdate;
  transaction.paid = contractExpense.paid;
  transaction.code = '#' + codeNumber.toString();
  transaction.paidDate = contractExpense.paidDate;
  transaction.uploadedFiles = contractExpense.uploadedFiles;
  transaction.editionHistory = [];
  transaction.ISS = "0,00";

  return transaction;
}

function receipt2Transaction(contractReceipt, codeNumber, teamId, managerId){
  var transaction = {};
  transaction.author = managerId;
  transaction.costCenter = teamId;
  transaction.modelCostCenter = 'Times';
  transaction.description = contractReceipt.description;
  transaction.value = contractReceipt.value;
  transaction.notaFiscal = contractReceipt.notaFiscal;
  transaction.companyPercentage = contractReceipt.nortanPercentage;
  transaction.created = contractReceipt.created;
  transaction.lastUpdate = contractReceipt.lastUpdate;
  transaction.paid = contractReceipt.paid;
  transaction.paidDate = contractReceipt.paidDate;
  transaction.dueDate = contractReceipt.dueDate;
  transaction.ISS = contractReceipt.ISS;
  transaction.editionHistory = [];
  transaction.uploadedFiles = [];
  transaction.team = [];
  transaction.code = '#' + codeNumber.toString();
  transaction.type = '';
  transaction.subType = '';
  transaction.nf = true;

  return transaction;
}

db.companies.find().forEach((company) => {
  company.logoSupport = {
    url: '',
    name: '',
  };
  db.companies.replaceOne({ _id: company._id }, company);
});

db.users.find().forEach((user) => {
  const company = db.companies.findOne();
  user.company = company;
  delete user.transactions;
  db.users.replaceOne({ _id: user._id }, user);
});

db.platformconfigs.find().forEach((config) => {
  config.oneDriveConfig.teamTransactions = {
    oneDriveId: '',
    folderId: '',
  };
  config.oneDriveConfig.providerFiles = {
    oneDriveId: '',
    folderId: '',
  };
  delete config.oneDriveConfig.teams;
  delete config.oneDriveConfig.providers;
  db.platformconfigs.replaceOne({ _id: config._id }, config);
});

db.teams.find().forEach((team) => {
  var i = db.transactions.estimatedDocumentCount();
  if (team.expenses) {
    team.expenses = team.expenses.map((teamExpense) => {
      i++;
      const transaction = teamExpense2Transaction(teamExpense, team._id, i);
      const result = db.transactions.insertOne(transaction);
      return result.insertedId;
    });
  } else {
    team.expenses = [];
  }
  db.teams.replaceOne({ _id: team._id }, team);
});

db.contracts.find().forEach((contract) => {
  var i = db.transactions.estimatedDocumentCount();
  if (contract.expenses) {
    contract.expenses = contract.expenses.map((contractExpense) => {
      i++;
      const invoiceTeamId = db.invoices.findOne({ _id: contract.invoice }).nortanTeam;
      const transaction = contractExpense2Transaction(contractExpense, contract._id, invoiceTeamId, i);
      const result = db.transactions.insertOne(transaction);
      return result.insertedId;
    });
  } else {
    contract.expenses = [];
  }
  db.contracts.replaceOne({ _id: contract._id }, contract);
});

db.contracts.find().forEach((contract) => {
  var i = db.transactions.estimatedDocumentCount();
  if (contract.receipts) {
    contract.receipts = contract.receipts.map((contractReceipt) => {
      i++;
      const invoice = db.invoices.findOne({ _id: contract.invoice });
      const transaction = receipt2Transaction(contractReceipt, i, invoice.nortanTeam ,invoice.author);
      const result = db.transactions.insertOne(transaction);
      return result.insertedId;
    });
  } else {
    contract.receipts = [];
  }
  db.contracts.replaceOne({ _id: contract._id }, contract);
});

db.teams.find().forEach((team) => {
  team.receipts = [];
  db.teams.replaceOne({ _id: team._id }, team);
})

/**
 * Start of fullName migration
 */

db.contractors.find().forEach((contractor) => {
  contractor.name = contractor.fullName;
  delete contractor.fullName;
  if (!contractor.comercialRepresentatives) contractor.comercialRepresentatives = [];
  contractor.comercialRepresentatives.forEach((representative) => {
    representative.name = representative.fullName;
    delete representative.fullName;
  });
  if (!contractor.legalRepresentatives) contractor.legalRepresentatives = [];
  contractor.legalRepresentatives.forEach((representative) => {
    representative.name = representative.fullName;
    delete representative.fullName;
  });
  db.contractors.replaceOne({ _id: contractor._id }, contractor);
});

db.invoices.find().forEach((invoice) => {
  invoice.description = invoice.name;
  delete invoice.name;

  db.invoices.replaceOne({ _id: invoice._id }, invoice);
});

db.providers.find().forEach((provider) => {
  provider.bankName = provider.name;
  provider.name = provider.fullName;
  delete provider.fullName;

  db.providers.replaceOne({ _id: provider._id }, provider);
});

db.users.find().forEach((user) => {
  user.name = user.fullName;
  delete user.fullName;

  db.users.replaceOne({ _id: user._id }, user);
});

/**
 * End of fullName migration
 */