// Select the database to use.
use('nortan-prod');

// Functions

function round(num) {
  return Math.round((num + Number.EPSILON) * 100) / 100;
}

function toLiquid(value, nf, nortan) {
  const result = round(moneyToNumber(value) * toMutiplyPercentage(nf) * toMutiplyPercentage(nortan));
  return numberToMoney(result);
}

function toMutiplyPercentage(percentage) {
  return (100 - numberToNumber(percentage)) / 100;
}

function numberToString(number, decimals = 2) {
  return number.toFixed(decimals).toString().replace('.', ',');
}

function setDefaultDistribution(invoice) {
  var defaultDistribution = numberToString(100 / invoice.team.length, 20);

  invoice.team = invoice.team.map((member) => ({
    user: member.user,
    coordination: member.coordination,
    distribution: defaultDistribution,
    netValue: '',
    grossValue: '',
  }));
}

function numberToNumber(money) {
  if (!money) return 0;
  const result = money.replace(',', '.');
  return +result;
}

function numberToMoney(number) {
  return moneyMask(Number(number).toFixed(2).toString());
}

function moneyToNumber(money) {
  if (!money) return 0;
  const result = money.replace('.', '').replace(',', '.');
  return +result;
}

function moneyMask(value, decimal = 2, decimalCaracter = ',', thousand = '.') {
  value = value.replace(/\D/gi, '').replace(new RegExp('([0-9]{' + decimal + '})$', 'g'), decimalCaracter + '$1');
  if (value.length === 1) {
    const dec = Array(decimal - 1).fill(0);
    return `0${decimalCaracter}${dec.join('')}${value}`;
  }
  if (value.length === decimal + 1) {
    return '0' + value;
  } else if (value.length > decimal + 2 && value.charAt(0) === '0') {
    return value.substr(1);
  }
  if (thousand && value.length > Number(4) + Number(decimal)) {
    const valueOne = `([0-9]{3})${decimalCaracter}([0-9]{${decimal}}$)`;
    value = value.replace(new RegExp(`${valueOne}`, `g`), `${thousand}$1${decimalCaracter}$2`);
  }
  if (thousand && value.length > Number(8) + Number(decimal)) {
    const valueTwo = `([0-9]{3})${thousand}([0-9]{3})${decimalCaracter}([0-9]{${decimal}}$)`;
    value = value.replace(new RegExp(`${valueTwo}`, `g`), `${thousand}$1${thousand}$2${decimalCaracter}$3`);
  }

  return value;
}

function convertCoordinationToSector(coordString) {
  switch (coordString) {
    case (coordString.match(/C\.ADM/) || {}).input:
      return '6201b405329f446f16e1b406';

    case (coordString.match(/C\.G\.O/) || {}).input:
      return '6201b04838baa8d128ac4ec4';

    case (coordString.match(/C\.INST/) || {}).input:
      return '6201b0fb38baa8d128ac4ed5';

    case (coordString.match(/C\.IMP/) || {}).input:
      return '6201b07238baa8d128ac4ecd';

    case (coordString.match(/C\.P\.A/) || {}).input:
      return '6201afc938baa8d128ac4eb4';

    case (coordString.match(/C\.D\.I/) || {}).input:
      return '6201afc938baa8d128ac4eb5';

    case (coordString.match(/C\.S\.E/) || {}).input:
      return '6201af9438baa8d128ac4ea1';

    case (coordString.match(/C\.S\.H/) || {}).input:
      return '6201af9438baa8d128ac4ea4';

    case (coordString.match(/C\.S\.EST/) || {}).input:
      return '6201af9438baa8d128ac4ea2';

    case (coordString.match(/C\.S\.I/) || {}).input:
      return '6201af9438baa8d128ac4ea3';

    case (coordString.match(/C\.R\.H/) || {}).input:
      return '6201b398329f446f16e1b3fe';

    case (coordString.match(/C\.M\.A/) || {}).input:
      return '6201b398329f446f16e1b3ff';

    default:
      return '';
  }
}

function convertDepartmentToNortanTeam(departmentString, sectorId = '') {
  switch (departmentString) {
    case 'DAD':
      return '6201b405329f446f16e1b404';

    case 'DEC':
      switch (sectorId) {
        case '6201b07238baa8d128ac4ecd':
          return '61362107f04ddc1a6a59f390';
        case '6201b04838baa8d128ac4ec4':
          return '613236a07f6ed15db318c7d8';
        case '6201b0fb38baa8d128ac4ed5':
          return '614b58d90d2cf0435ea59e52';
        default:
          return '61362107f04ddc1a6a59f390';
      }

    case 'DAQ':
      return '613232b5687ed0547f0bee19';

    case 'DPC':
      return '613232b5687ed0547f0bee19';

    case 'DRM':
      return '6201b37d329f446f16e1b3fa';

    default:
      return '';
  }
}

function convertOldExpenseTypes(expense) {
  switch (expense.type) {
    case 'Divisão de lucro':
      expense.type = 'Custo Fixo';
      expense.subType = 'Divisão de Lucro';
      break;
    case 'Folha de pagamento':
      expense.type = 'Custo Fixo';
      expense.subType = 'Folha de Pagamento';
      break;
    case 'Reembolso':
      expense.type = 'Despesa Variável';
      expense.subType = 'Outros';
      break;
    case 'Despesas':
      expense.type = 'Despesa Variável';
      expense.subType = 'Outros';
      break;
    case 'Custo operacional':
      expense.type = 'Custo Fixo';
      expense.subType = 'Outros';
      break;
    case 'Gastos fixos': {
      expense.type = 'Custo Fixo';
      switch (expense.subType) {
        case 'Marketing':
          expense.type = 'Despesa Fixa';
          break;
        case 'Administrativo':
          expense.subType = 'Folha de Pagamento';
          break;
        default:
          break;
      }
      break;
    }
  }
}

function convertOldContractExpenseTypes(expense) {
  switch (expense.type) {
    case 'Pré-Obra':
      expense.type = 'Pré-Serviço';
      break;
    case 'Transporte e Alimentação':
      expense.type = 'Transporte';
      break;
    default:
      break;
  }
}

// Add active field to Users
db.users.find().forEach((u) => {
  u.active = true;
  db.users.replaceOne({ _id: u._id }, u);
});

// Add sector list to team config
db.teams.find().forEach((team) => {
  team.config.sectors = [];
  db.teams.replaceOne({ _id: team._id }, team);
});

// Fix payment value format
db.contracts.find().forEach((c) => {
  if (c.payments) {
    c.payments.forEach((payment, i) => {
      c.payments[i].value = moneyMask(c.payments[i].value);
    });
    db.contracts.replaceOne({ _id: c._id }, c);
  }
});

// Chance CSE to CBT
var cbt = 'C.B.T - Coordenação de Baixa Tensão';
var cse = 'C.S.E - Coordenação de Sistemas Elétricos';
db.users.find().forEach((u) => {
  u.mediaTensao = false;
  u.baixaTensao = u.eletrica;
  delete u.eletrica;
  if (u.expertise) {
    u.expertise.forEach((e, idx) => {
      if (e.coordination && e.coordination == cse) u.expertise[idx].coordination = cbt;
    });
  } else print('Não tem area de atuação no usuario ' + u.fullName);
  db.users.replaceOne({ _id: u._id }, u);
});
db.invoices.find().forEach((i) => {
  var changed = false;
  if (i.coordination && i.coordination == cse) {
    i.coordination = cbt;
    changed = true;
  }
  if (i.team) {
    i.team.forEach((member, idx) => {
      if (member.coordination && member.coordination == cse) {
        i.team[idx].coordination = cbt;
        changed = true;
      }
    });
  } else print('Não tem time no orçamento ' + i.code);
  if (changed) db.invoices.replaceOne({ _id: i._id }, i);
});
db.contracts
  .aggregate(
    { $unwind: '$invoice' },
    {
      $lookup: {
        from: 'invoices',
        localField: 'invoice',
        foreignField: '_id',
        as: 'invoice',
      },
    }
  )
  .forEach((c) => {
    var changed = false;
    if (c.team) {
      c.team.forEach((member, idx) => {
        if (member.coordination && member.coordination == cse) {
          c.team[idx].coordination = cbt;
          changed = true;
        }
      });
    } else print('Não tem time no conrato ' + c.invoice[0].code);
    if (c.payments) {
      c.payments.forEach((payment, i) => {
        payment.team.forEach((member, idx) => {
          if (member.coordination && member.coordination == cse) {
            payment.team[idx].coordination = cbt;
            changed = true;
          }
        });
      });
    } else print('Não tem arrays de pagamentos no conrato ' + c.invoice[0].code);
    if (c.expenses) {
      c.expenses.forEach((expense, i) => {
        if (expense.team) {
          expense.team.forEach((member, idx) => {
            if (member.coordination && member.coordination == cse) {
              expense.team[idx].coordination = cbt;
              changed = true;
            }
          });
        } else print('Não tem arrays de time na despesa ' + expense.code + ' no conrato ' + c.invoice[0].code);
      });
    } else print('Não tem array de despesas no conrato ' + c.invoice[0].code);
    if (changed) {
      c.invoice = c.invoice[0]._id;
      db.contracts.replaceOne({ _id: c._id }, c);
    }
  });

// Merge invoice and contract teams
db.invoices.find().forEach((i) => {
  if (i.team && i.team.length > 0) {
    if (i.status === 'Fechado') {
      var c = db.contracts.findOne({ invoice: i._id });
      if (c == null) print(i.code);
      if (c.team && c.team.length > 0) {
        i.team = c.team.map((member) => ({
          user: member.user,
          coordination: member.coordination,
          distribution: member.distribution,
          netValue: '',
          grossValue: '',
        }));
        delete c.team;
        if (!i.team.map((member) => member.distribution).every((distribution) => !!distribution))
          setDefaultDistribution(i);
        db.contracts.replaceOne({ _id: c._id }, c);
      } else {
        i.team.unshift({
          user: i.author,
          coordination: i.coordination,
          distribution: '100,00',
          netValue: '',
          grossValue: '',
        });
        setDefaultDistribution(i);
      }
    } else {
      i.team.unshift({
        user: i.author,
        coordination: i.coordination,
        distribution: '100,00',
        netValue: '',
        grossValue: '',
      });
      setDefaultDistribution(i);
    }
  } else {
    if (i.status === 'Fechado') {
      var c = db.contracts.findOne({ invoice: i._id });
      if (c == null) print(i.code);
      if (c.team && c.team.length > 0) {
        i.team = c.team.map((member) => ({
          user: member.user,
          coordination: member.coordination,
          distribution: member.distribution,
          netValue: '',
          grossValue: '',
        }));
        delete c.team;
        if (!i.team.map((member) => member.distribution).every((distribution) => !!distribution))
          setDefaultDistribution(i);
        db.contracts.replaceOne({ _id: c._id }, c);
      } else {
        i.team = [
          { user: i.author, coordination: i.coordination, distribution: '100,00', netValue: '', grossValue: '' },
        ];
      }
    } else
      i.team = [{ user: i.author, coordination: i.coordination, distribution: '100,00', netValue: '', grossValue: '' }];
  }
  db.invoices.replaceOne({ _id: i._id }, i);
});

// Fix invoice status history
db.invoices.find().forEach((i) => {
  i.statusHistory = [];
  i.statusHistory.push({
    status: i.status,
    start: i.lastUpdate,
  });
  db.invoices.replaceOne({ _id: i._id }, i);
});

// Fix contract status history
db.contracts.find().forEach((c) => {
  c.statusHistory = [];
  c.statusHistory.push({
    status: c.status,
    start: c.status != 'Em andamento' ? c.lastUpdate : c.created,
  });
  db.contracts.replaceOne({ _id: c._id }, c);
});

// Fix createdExpenses number and expense code
db.contracts.find().forEach((c) => {
  if (c.expenses) {
    c.expenses.forEach((expense, i) => {
      c.expenses[i].code = '#' + (i + 1).toString();
    });
    c.createdExpenses = c.expenses.length;
  } else c.createdExpenses = 0;
  db.contracts.replaceOne({ _id: c._id }, c);
});

// Fix percentages strings
db.contracts.find().forEach((c) => {
  if (c.team) {
    c.team.forEach((member, i) => {
      if (member.distribution) c.team[i].distribution = member.distribution.replace('.', ',');
    });
  }
  if (c.receipts) {
    c.receipts.forEach((receipt, i) => {
      if ((receipt.notaFiscal.match(/\./g) || []).length > 0) print(receipt.notaFiscal);
      c.receipts[i].notaFiscal = receipt.notaFiscal.replace('.', ',');
      c.receipts[i].nortanPercentage = receipt.nortanPercentage.replace('.', ',');
    });
  }
  if (c.expenses) {
    c.expenses.forEach((expense, i) => {
      c.expenses[i].team.forEach((member, j) => {
        c.expenses[i].team[j].percentage = member.percentage.replace('.', ',');
      });
    });
  }
  db.contracts.replaceOne({ _id: c._id }, c);
});

db.contracts.find().forEach((c) => {
  if (c.receipts) {
    c.receipts.forEach((receipt, i) => {
      if ((receipt.notaFiscal.match(/\./g) || []).length > 0) print(receipt.notaFiscal);
      if ((receipt.nortanPercentage.match(/\./g) || []).length > 0) print(receipt.nortanPercentage);
    });
  }
});

// Update Mongo contracts db

db.contracts.find().forEach(function (c) {
  c.payments.forEach(function (pid, i) {
    c.payments[i] = db.payments.findOne({ _id: pid }, { contract: 0 });
    c.payments[i].team.forEach(function (tid, j) {
      c.payments[i].team[j] = db.userpayments.findOne({ _id: tid }, { payment: 0 });
    });
  });
  db.contracts.replaceOne({ _id: c._id }, c);
});

db.contracts.find().pretty();

// Update author by code

['168', '186'].forEach(function (n) {
  let code = 'ORC-' + n + '/.*';
  db.invoices.findOneAndUpdate({ code: { $regex: code } }, { $set: { author: ObjectId('5f109c11a1a385001710104a') } });
});

// Update expense coordination

db.contracts.find().forEach(function (c) {
  if (c.expenses && c.expenses.length > 0) {
    c.expenses = c.expenses.map((expense) => {
      expense.splitType = 'Proporcional';
      expense.team = [];
      for (const member of c.team) {
        expense.team.push({
          user: member.user,
          value: numberToMoney(moneyToNumber(expense.value) * toMutiplyPercentage(member.distribution)),
          percentage: member.distribution,
          coordination: member.coordination,
        });
        print('member added');
      }
      return expense;
    });
  }
  db.contracts.replaceOne({ _id: c._id }, c);
});

// Update position to array

db.users.find().forEach(function (u) {
  u.position = [u.position];
  db.users.replaceOne({ _id: u._id }, u);
});

// Split OE on to OE and OP

db.invoices.find().forEach(function (i) {
  i.administration = 'nortan';
  db.invoices.replaceOne({ _id: i._id }, i);
});

db.contracts.find().forEach(function (c) {
  c.receipts = [];
  c.payments.forEach(function (pid, i) {
    var original = c.payments[i];
    if (original.notaFiscal == '0' || original.notaFiscal == undefined)
      db.invoices.updateOne({ _id: c.invoice }, { $set: { administration: 'pessoal' } });
    c.receipts.push({
      _id: original._id,
      description: original.service,
      value: original.value,
      notaFiscal: original.notaFiscal,
      nortanPercentage: original.nortanPercentage,
      created: original.created,
      lastUpdate: original.lastUpdate,
      paid: original.paid == 'sim' ? true : false,
      paidDate: original.paidDate,
    });
    c.payments[i] = {
      _id: original._id,
      service: original.service,
      value: toLiquid(original.value, original.notaFiscal, original.nortanPercentage),
      team: original.team,
      created: original.created,
      lastUpdate: original.lastUpdate,
      paid: original.paid == 'sim' ? true : false,
      paidDate: original.paidDate,
    };
  });
  db.contracts.replaceOne({ _id: c._id }, c);
});

/**
 * Start of data migration
 */
//Refactor coordination to sectors
db.users.find().forEach((user) => {
  user.sectors = [];
  if (user.arquitetura) user.sectors.push('6201afc938baa8d128ac4eb4');
  delete user.arquitetura;
  if (user.instalacoes) user.sectors.push('6201b0fb38baa8d128ac4ed5');
  delete user.instalacoes;
  if (user.design) user.sectors.push('6201afc938baa8d128ac4eb5');
  delete user.design;
  if (user.civil) user.sectors.push('6201af9438baa8d128ac4ea2');
  delete user.civil;
  if (user.eletrica) user.sectors.push('6201af9438baa8d128ac4ea1');
  delete user.eletrica;
  if (user.incendio) user.sectors.push('6201af9438baa8d128ac4ea3');
  delete user.incendio;
  if (user.sanitaria) user.sectors.push('6201af9438baa8d128ac4ea4');
  delete user.sanitaria;
  if (user.obras) user.sectors.push('6201b04838baa8d128ac4ec4');
  delete user.obras;
  if (user.impermeabilizacao) user.sectors.push('6201b07238baa8d128ac4ecd');
  delete user.impermeabilizacao;
  if (user.ambiental) user.sectors.push('6201b398329f446f16e1b3ff');
  delete user.ambiental;
  if (user.hidrico) user.sectors.push('6201b398329f446f16e1b3fe');
  delete user.hidrico;
  if (user.adm) user.sectors.push('6201b405329f446f16e1b406');
  delete user.adm;

  delete user.mainDepartment;

  if (user.expertise)
    user.expertise.forEach((expertise) => {
      expertise.sector = convertCoordinationToSector(expertise.coordination);
      delete expertise.coordination;
    });

  user.notifications = [];
  user.professionalEmail = user.emailNortan;
  delete user.emailNortan;

  db.users.replaceOne({ _id: user._id }, user);
});

db.contracts.find().forEach((contract) => {
  if (contract.expenses)
    contract.expenses.forEach((expense) => {
      convertOldContractExpenseTypes(expense);
      if (expense.team)
        expense.team.forEach((member) => {
          member.sector = member.coordination ? convertCoordinationToSector(member.coordination) : '';
          delete member.coordination;
        });
    });

  if (contract.payments)
    contract.payments.forEach((payment) => {
      if (payment.team)
        payment.team.forEach((member) => {
          member.sector = member.coordination ? convertCoordinationToSector(member.coordination) : '';
          delete member.coordination;
        });
      if (payment.paidDate) payment.predictedDate = payment.paidDate;
      else payment.predictedDate = payment.created;
    });

  contract.checklist = [];
  db.contracts.replaceOne({ _id: contract._id }, contract);
});

db.invoices.find().forEach((invoice) => {
  invoice.sector = convertCoordinationToSector(invoice.coordination);
  delete invoice.coordination;
  invoice.nortanTeam = convertDepartmentToNortanTeam(invoice.department, invoice.sector);
  invoice.prospectedBy = invoice.prospectedBy ? invoice.prospectedBy : invoice.author;
  invoice.department = undefined;
  invoice.hasPageBreak = {
    valuesTable: false,
    stagesTable: false,
    materialTable: false,
    preliminaryStage: false,
    executiveStage: false,
    complementaryStage: false,
    importants: false,
    contractor: false,
    subject: false,
  };

  if (invoice.team)
    invoice.team.forEach((member) => {
      member.sector = member.coordination ? convertCoordinationToSector(member.coordination) : '';
      delete member.coordination;
    });

  db.invoices.replaceOne({ _id: invoice._id }, invoice);
});

db.createCollection('platformconfigs');
const config = {
  notificationConfig: {
    contractClosed: {
      email: true,
      platform: true,
    },
    userMentioned: {
      email: true,
      platform: true,
    },
    transactionCreated: {
      email: true,
      platform: true,
    },
    transactionPaid: {
      email: true,
      platform: true,
    },
    teamMemberPaid: {
      email: true,
      platform: true,
    },
    receiptDue: {
      email: true,
      platform: true,
    },
    stageResponsible: {
      email: true,
      platform: true,
    },
  },
  expenseConfig: {
    adminExpenseTypes: [
      {
        name: 'Empréstimos',
        subTypes: [],
      },
      {
        name: 'Custo Fixo',
        subTypes: [
          'Aluguel',
          'Anuidade em Conselhos',
          'Divisão de Lucro',
          'Energia',
          'Equipamentos',
          'Internet',
          'Folha de Pagamento',
          'Transporte - Colaborador Interno',
          'Veículos',
          'Outros',
        ],
      },
      {
        name: 'Custo Variável',
        subTypes: ['Combustível', 'Equipamentos', 'Manutenção', 'Veículos', 'Softwares', 'Outros'],
      },
      {
        name: 'Despesa Fixa',
        subTypes: ['Benefícios - Colaboradores', 'Infraestrutura Digital', 'Limpeza e Copa', 'Marketing', 'Outros'],
      },
      {
        name: 'Despesa Variável',
        subTypes: [
          'Bonificação/Premiação',
          'Cursos',
          'Eventos',
          'Fardas e Similares',
          'Infraestrutura',
          'Infraestrutura Digital',
          'Manutenção',
          'Minuterias - Dscritório',
          'Terceirização',
          'Outros',
        ],
      },
      {
        name: 'Encargos',
        subTypes: [],
      },
      {
        name: 'Impostos',
        subTypes: [],
      },
      {
        name: 'Investimentos',
        subTypes: [],
      },
      {
        name: 'Receita',
        subTypes: [],
      },
      {
        name: 'Outros',
        subTypes: [],
      },
    ],
    contractExpenseTypes: [
      {
        name: 'Alimentação',
        subTypes: [],
      },
      {
        name: 'Aporte',
        subTypes: [],
      },
      {
        name: 'Comissão',
        subTypes: [],
      },
      {
        name: 'Folha de Pagamento',
        subTypes: [],
      },
      {
        name: 'Gasolina',
        subTypes: [],
      },
      {
        name: 'Material',
        subTypes: [
          'Aditivos - Massas',
          'Andaimes',
          'Areia',
          'Argamassa',
          'Bacias - Pia',
          'Bacias - Sanitário',
          'Bloco Cerâmico',
          'Brita',
          'Cabos Elétricos',
          'Caixas - Hidrossanitário',
          'Caixas - Quadros Elétricos',
          'Cerâmica',
          'Cimento',
          'Conexões - Elétrico',
          'Conexões - Hidrossanitário',
          'Drywall',
          'EPI/EPC',
          'Escoras',
          'Estruturas Metálicas',
          'Ferramentas / Máquinas',
          'Ferro',
          'Gesso - Forro',
          'Gesso - Parede',
          'Granito',
          'Impermeabilizante Mantas',
          'Impermeabilizantes Líquidos',
          'Isobloco',
          'Janelas - Madeira',
          'Janelas - Metálicas',
          'Janelas - PVC',
          'Lã de Vidro, Pet ou Similares',
          'Lajota Cerâmica',
          'Lajota Isopor',
          'Lâmpadas e Luminárias',
          'Madeira Estrutural',
          'Madeira',
          'Malhas de ferro',
          'Nervura',
          'Peças - Esquadria',
          'Peças - Elétrica',
          'Peças - Hidrossanitário',
          'Pintura',
          'Placa Cimentícia',
          'Placa de EPS',
          'Porcelanato',
          'Portas',
          'PVC - Forro',
          'Steal Frame',
          'Telhas',
          'Tijolo',
          'Tomadas',
          'Tubos Elétricos',
          'Tubos Hidrossanitários',
          'Vidros',
          'Outros',
        ],
      },
      {
        name: 'Pré-Serviço',
        subTypes: [],
      },
      {
        name: 'Receita',
        subTypes: [],
      },
      {
        name: 'Terceirização',
        subTypes: [
          'Alvenaria / Vedação',
          'Coberta / Forros',
          'Esquadrias',
          'Estudos Técnicos Especializados',
          'Execução de Muro',
          'Impermeabilizações',
          'Infra-estrutura',
          'Instalações Elétricas',
          'Instalacoes Hidrosanitaria',
          'Instalacoes Telefônicas',
          'Louças e Metais - Instalação (materiais fornecidos pelo cliente)',
          'Pavimentacão',
          'Pintura Geral',
          'Revestimentos',
          'Serviços Complementares',
          'Servicos Preliminares e Gerais',
          'Supra-estrutura',
          'Trabalhos em Terra',
        ],
      },
      {
        name: 'Transporte',
        subTypes: [],
      },
      {
        name: 'Locação',
        subTypes: ['Escoras', 'Andaimes', 'Gerador', 'Martelete', 'Furadeira', 'Serra Disco', 'Outros'],
      },
      {
        name: 'Outros',
        subTypes: [],
      },
    ],
    isDuplicated: false,
  },
  invoiceConfig: {
    hasType: true,
    hasHeader: true,
    hasTeam: true,
    hasPreliminary: true,
    hasExecutive: true,
    hasComplementary: true,
    hasStageName: true,
    hasImportants: true,
    hasMaterialList: true,
    nfPercentage: '0,00',
    organizationPercentage: '0,00',
    codeAbbreviation: 'NINC',
  },
  profileConfig: {
    positions: [
      {
        roleTypeName: 'Administrador',
        permission: 'Administrador',
      },
      {
        roleTypeName: 'Membro',
        permission: 'Membro',
      },
      {
        roleTypeName: 'Financeiro',
        permission: 'Financeiro',
      },
    ],
    hasLevels: true,
    levels: [],
    hasTeam: true,
    hasSector: true,
    hasExpertiseBySector: true,
  },
  socialConfig: {
    youtubeLink: '',
    linkedinLink: '',
    instagramLink: '',
    glassfrogLink: '',
    gathertownLink: '',
    companyName: 'NINC',
  },
  modulesConfig: {
    hasPromotion: true,
    hasCourse: true,
  },
  oneDriveConfig: {
    isActive: false,
  },
};
db.platformconfigs.insertOne(config);

db.teams.find().forEach((team) => {
  team.leader = '5eeae34b9e99900017c03ea5';
  team.members = [];
  team.isOrganizationTeam = false;
  db.teams.replaceOne({ _id: team._id }, team);
});

//Expense collection to team expense list
var nortanTeam = db.teams.findOne({ name: 'Nortan' });
db.expenses.find().forEach((expense) => {
  expense.subType = expense.fixedType;
  delete expense.fixedType;
  convertOldExpenseTypes(expense);
  nortanTeam.expenses.push(expense);
});
db.teams.replaceOne({ _id: nortanTeam._id }, nortanTeam);
db.expenses.drop();

db.teams.find().forEach((team) => {
  team.expenses.forEach((expense) => {
    convertOldExpenseTypes(expense);
  });

  team.members.forEach((member) => {
    member.sector = member.coordination ? convertCoordinationToSector(member.coordination) : '';
    delete member.coordination;
  });
  team.transactions = [];
  team.config.path = '';
  delete team.config.expenseTypes;
  db.teams.replaceOne({ _id: team._id }, team);
});

/**
 * Endof data migration
 */

db.platformconfigs.find().forEach((config) => {
  config.expenseConfig = {
    adminExpenses: config.expenseTypes,
    contractExpenses: [],
    isDuplicated: false,
  };
  delete config.expenseTypes;
  config.notificationConfig = {
    contractClosed: {
      email: true,
      platform: true,
    },
    userMentioned: {
      email: true,
      platform: true,
    },
    transactionCreated: {
      email: true,
      platform: true,
    },
    transactionPaid: {
      email: true,
      platform: true,
    },
    teamMemberPaid: {
      email: true,
      platform: true,
    },
    receiptDue: {
      email: true,
      platform: true,
    },
    stageResponsible: {
      email: true,
      platform: true,
    },
  };

   config.invoiceConfig.units = ['m²','km','ha','dia','unidade'];
   config.socialConfig.showCompanyName = true;
   config.socialConfig.address = ''
   config.socialConfig.cnpj = ''
   config.socialConfig.qrcodeURL = ''

  db.platformconfigs.replaceOne({ _id: config._id }, config);
});

db.teams.find().forEach((team) => {
  team.organizationPercentage = '';
  team.nfPercentage = '';
  team.overridePercentages = false;

  team.members.forEach((member) => {
    member.sectors = []
    if(member.sector) member.sectors.push(member.sector)
    delete member.sector
  })

  db.teams.replaceOne({ _id: team._id }, team);
})

db.contracts.find().forEach((contract) => {
  contract.payments.forEach((payment) => {
    if (payment.paidDate) payment.predictedDate = payment.paidDate;
    else payment.predictedDate = payment.created;
  });
  db.contracts.replaceOne({ _id: contract._id }, contract);
});

db.invoices.find().forEach((invoice) => {
  invoice.importants = invoice.importants.map((i) => {
    return {text: i, isVisible: true};
  });
  invoice.laep = invoice.laep.map((p) => {
    return {text: p, isVisible: true};
  });
  invoice.laee = invoice.laee.map((e) => {
    return {text: e, isVisible: true};
  });
  invoice.laec = invoice.laec.map((c) => {
    return {text: c, isVisible: true};
  });
  db.invoices.replaceOne({ _id: invoice._id }, invoice);
});